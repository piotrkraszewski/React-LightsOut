{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","handleClick","evt","props","flipCellsAroundMe","classes","this","isLit","className","onClick","Component","Board","state","hasWon","board","createBoard","y","nrows","row","x","ncols","push","Math","random","chanceLightStartsOn","coord","console","log","split","map","Number","flipCell","every","cell","setState","tblBoard","key","flipCellsAround","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+TAgCeA,G,iNAdXC,YAAc,SAACC,GAEX,EAAKC,MAAMC,qB,wEAIX,IAAIC,EAAU,QAAUC,KAAKH,MAAMI,MAAQ,YAAc,IAEzD,OACI,wBAAIC,UAAWH,EAASI,QAASH,KAAKL,kB,GAX/BS,cCXbC,G,iNAQJC,MAAQ,CACJC,QAAQ,EACRC,MAAO,EAAKC,e,6EAMd,IAFA,IAAID,EAAQ,GAEJE,EAAE,EAAGA,EAAIV,KAAKH,MAAMc,MAAOD,IAAI,CAEnC,IADA,IAAIE,EAAM,GACFC,EAAE,EAAGA,EAAIb,KAAKH,MAAMiB,MAAOD,IAC/BD,EAAIG,KAAKC,KAAKC,SAAWjB,KAAKH,MAAMqB,qBAExCV,EAAMO,KAAKH,GAEf,OAAOJ,I,sCAKOW,GACdC,QAAQC,IAAI,WAAYF,GADH,MAEAnB,KAAKH,MAArBiB,EAFgB,EAEhBA,MAAOH,EAFS,EAETA,MACRH,EAAQR,KAAKM,MAAME,MAHF,EAIRW,EAAMG,MAAM,KAAKC,IAAIC,QAJb,mBAIhBd,EAJgB,KAIbG,EAJa,KAOrB,SAASY,EAASf,EAAGG,GAGfA,GAAK,GAAKA,EAAIC,GAASJ,GAAK,GAAKA,EAAIC,IACvCH,EAAME,GAAGG,IAAML,EAAME,GAAGG,IAI5BY,EAASf,EAAGG,GACZY,EAASf,EAAGG,EAAI,GAChBY,EAASf,EAAGG,EAAI,GAChBY,EAASf,EAAI,EAAGG,GAChBY,EAASf,EAAI,EAAGG,GAGhB,IAAIN,EAASC,EAAMkB,OAAM,SAAAd,GAAG,OAAIA,EAAIc,OAAM,SAAAC,GAAI,OAAKA,QAEnD3B,KAAK4B,SAAS,CAAEpB,MAAOA,EAAOD,OAAQA,M,+BAM9B,IAAD,OACP,GAAGP,KAAKM,MAAMC,OACZ,OACE,yBAAKL,UAAU,eACb,yBAAKA,UAAU,UACb,0BAAMA,UAAU,eAAhB,OACA,0BAAMA,UAAU,aAAhB,SAOR,IADA,IAAI2B,EAAW,GACPnB,EAAI,EAAGA,EAAIV,KAAKH,MAAMc,MAAMD,IAAI,CAEpC,IADA,IAAIE,EAAM,GAD0B,WAE5BC,GACJ,IAAIM,EAAK,UAAMT,EAAN,YAAWG,GACpBD,EAAIG,KAAK,kBAAC,EAAD,CAAMe,IAAKX,EAAOlB,MAAO,EAAKK,MAAME,MAAME,GAAGG,GAAIf,kBAAmB,kBAAM,EAAKiC,gBAAgBZ,QAFpGN,EAAI,EAAGA,EAAIb,KAAKH,MAAMiB,MAAOD,IAAK,EAAlCA,GAIZgB,EAASd,KAAK,4BAAKH,IAEnB,OACE,6BACGZ,KAAKM,MAAMC,OAEZ,yBAAKL,UAAU,eACb,yBAAKA,UAAU,eAAf,UACA,yBAAKA,UAAU,aAAf,QAGF,6BACE,yBAAKA,UAAU,eACb,yBAAKA,UAAU,eAAf,UACA,yBAAKA,UAAU,aAAf,QAEF,2BAAOA,UAAU,SACf,+BACK2B,U,GA/FGzB,cAAdC,EAEK2B,aAAe,CAClBrB,MAAO,EACPG,MAAO,EACPI,oBAAqB,KAqGdb,Q,MCnGA4B,MARf,WACE,OACE,yBAAK/B,UAAU,OACb,kBAAC,EAAD,QCKcgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.31b58807.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './Cell.css'\r\n\r\n/** A single cell on the board.\r\n *\r\n * This has no state --- just two props:\r\n *\r\n * - flipCellsAroundMe: a function rec'd from the board which flips this\r\n *      cell and the cells around of it\r\n *\r\n * - isLit: boolean, is this cell lit?\r\n *\r\n * This handles clicks --- by calling flipCellsAroundMe\r\n *\r\n **/\r\n\r\nclass Cell extends Component{\r\n\r\n    handleClick = (evt) => {\r\n        // call up to the board to flip cells around this cell\r\n        this.props.flipCellsAroundMe();\r\n      }\r\n\r\n    render() {\r\n        let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\r\n    \r\n        return (\r\n            <td className={classes} onClick={this.handleClick} />\r\n        )\r\n      }\r\n}\r\n\r\nexport default Cell","import React, {Component} from \"react\";\r\nimport Cell from \"./Cell\";\r\nimport './Board.css';\r\n\r\n\r\nclass Board extends Component {\r\n\r\n    static defaultProps = {\r\n        nrows: 5,\r\n        ncols: 5,\r\n        chanceLightStartsOn: 0.25\r\n    }\r\n\r\n  state = {\r\n      hasWon: false,\r\n      board: this.createBoard()\r\n  }\r\n\r\n  createBoard() {\r\n    let board = [];\r\n    // create array-of-arrays of true/false values\r\n    for(let y=0; y < this.props.nrows; y++){\r\n        let row = []\r\n        for(let x=0; x < this.props.ncols; x++){\r\n            row.push(Math.random() < this.props.chanceLightStartsOn)\r\n        }\r\n        board.push(row)\r\n    }\r\n    return board\r\n  }\r\n\r\n  /** handle changing a cell: update board & determine if winner */\r\n\r\n  flipCellsAround(coord) {\r\n    console.log(\"flipping\", coord);\r\n    let {ncols, nrows} = this.props;\r\n    let board = this.state.board;\r\n    let [y, x] = coord.split(\"-\").map(Number);\r\n\r\n\r\n    function flipCell(y, x) {\r\n      // if this coord is actually on board, flip it\r\n\r\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\r\n        board[y][x] = !board[y][x]; // zmienia wartosc kom�rki na odwrotn�\r\n      }\r\n    }\r\n\r\n    flipCell(y, x)    // Flip center cell\r\n    flipCell(y, x - 1) // Flip left\r\n    flipCell(y, x + 1) // Flip right\r\n    flipCell(y - 1, x) // Flip below\r\n    flipCell(y + 1, x) // Flip above\r\n\r\n    // czy to prawda ze ka�da kom�rka w ka�dym rz�dzie ma warto�� false\r\n    let hasWon = board.every(row => row.every(cell => !cell))\r\n\r\n    this.setState({ board: board, hasWon: hasWon })\r\n  }\r\n\r\n\r\n  /** Render game board or winning message. */\r\n\r\n  render() {\r\n    if(this.state.hasWon){\r\n      return (\r\n        <div className='Board-title'>\r\n          <div className='Winner'>\r\n            <span className='neon-orange'>YOU</span>\r\n            <span className='neon-blue'>WIN</span>\r\n          </div>\r\n        </div>\r\n        )\r\n    }\r\n\r\n    let tblBoard = []\r\n    for(let y = 0; y < this.props.nrows;y++){\r\n        let row = []\r\n        for(let x = 0; x < this.props.ncols; x++){\r\n            let coord = `${y}-${x}`\r\n            row.push(<Cell key={coord} isLit={this.state.board[y][x]} flipCellsAroundMe={() => this.flipCellsAround(coord)}/>)\r\n        }\r\n    tblBoard.push(<tr>{row}</tr>)\r\n    }\r\n    return(\r\n      <div>\r\n        {this.state.hasWon \r\n        ? (\r\n        <div className='Board-title'>\r\n          <div className='neon-orange'>Lights</div>\r\n          <div className='neon-blue'>Out</div>\r\n        </div>\r\n        ) : (\r\n        <div>\r\n          <div className='Board-title'>\r\n            <div className='neon-orange'>Lights</div>\r\n            <div className='neon-blue'>Out</div>\r\n          </div>\r\n          <table className=\"Board\">\r\n            <tbody>\r\n                {tblBoard}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default Board;","import React from 'react';\nimport Board from './Board'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}